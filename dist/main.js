/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("async function getById(id) {\n  let res;\n  try {\n    const response = await fetch('../db/People.json');\n    if (response.ok) {\n      const arr = await response.json();\n      arr.forEach(el => {\n        if (el.playerID === id) {\n          res = el;\n        }\n      });\n      return res;\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getIdByName(name) {\n  let res;\n  try {\n    const response = await fetch('../db/People.json');\n    if (response.ok) {\n      const arr = await response.json();\n      arr.forEach(el => {\n        if (el.nameFirst + ' ' + el.nameLast === name) {\n          res = el.playerID;\n        }\n      });\n      return res;\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getHittingStats(id) {\n  try {\n    const response = await fetch('/db/Batting.json');\n    if (response.ok) {\n      const arr = await response.json();\n      return arr.filter(el => el.playerID === id);\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getTotalBatting(id) {\n  let totals = [];\n  const obj = await getHittingStats(id);\n  let ab = 0;\n  let hits = 0;\n  let doub = 0;\n  let trip = 0;\n  let hr = 0;\n  let sf = 0;\n  let bb = 0;\n  let rbi = 0;\n  let hbp = 0;\n  obj.forEach(i => {\n    ab += i.AB;\n    hits += i.H;\n    doub += i['2B'];\n    trip += i['3B'];\n    hr += i.HR;\n    sf += i.SF;\n    bb += i.BB;\n    rbi += i.RBI;\n    hbp += i.HBP;\n  });\n  totals.push(ab, hits, doub, trip, hr, sf, bb, rbi, hbp);\n  return totals;\n}\nasync function getPitchingStats(id) {\n  try {\n    const response = await fetch('/db/Pitching.json');\n    if (response.ok) {\n      const arr = await response.json();\n      return arr.filter(el => el.playerID === id);\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getPitchingTotals(id) {\n  let totals = [];\n  const obj = await getPitchingStats(id);\n  let w = 0;\n  let l = 0;\n  let er = 0;\n  let so = 0;\n  let ip = 0;\n  let h = 0;\n  let g = 0;\n  let bb = 0;\n  obj.forEach(i => {\n    w += i.W;\n    l += i.L;\n    er += i.ER;\n    so += i.SO;\n    ip += i.IPouts;\n    h += i.H;\n    g += i.G;\n    bb += i.BB;\n  });\n  totals.push(w, l, er, so, g, Math.round(ip / 3), bb, h);\n  return totals;\n}\n\n// getPitchingTotals('ohtansh01').then(res => console.log(res))\n\nasync function getAwards(id) {\n  let res = [];\n  let obj = {};\n  try {\n    const response = await fetch('/db/AwardsPlayers.json');\n    if (response.ok) {\n      const arr = await response.json();\n      arr.forEach(el => {\n        if (el.playerID === id) {\n          res.push(el.awardID);\n        }\n      });\n      for (let i = 0; i < res.length; i++) {\n        !obj[res[i]] ? obj[res[i]] = 1 : obj[res[i]]++;\n      }\n      return obj;\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getDetails(id) {\n  let res = [];\n  try {\n    const response = await fetch('/db/People.json');\n    if (response.ok) {\n      const arr = await response.json();\n      arr.forEach(el => {\n        if (el.playerID === id) {\n          res.push(el.nameFirst, el.nameLast, el.birthYear, el.birthCity, el.birthState, el.height, Number(el.finalGame.slice(0, 4)) - Number(el.debut.slice(0, 4)), el.bats, el.throws);\n        }\n      });\n      return res;\n    } else {\n      throw response;\n    }\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function appendBatting(id, num) {\n  arr = await getTotalBatting(id);\n  document.querySelector(`.stats-${num}-avg`).textContent = 'AVG: ' + calcAVG(arr[1], arr[0]).toFixed(3);\n  document.querySelector(`.stats-${num}-slg`).textContent = 'SLG: ' + calcSLG(arr[1], arr[2], arr[3], arr[4], arr[0]).toFixed(3);\n  document.querySelector(`.stats-${num}-obp`).textContent = 'OBP: ' + calcOBP(arr[1], arr[6], arr[8], arr[5], arr[0]).toFixed(3);\n  document.querySelector(`.stats-${num}-opb`).textContent = 'OPB: ' + calcOPS(arr[1], arr[2], arr[3], arr[4], arr[0], arr[1], arr[6], arr[8], arr[5]).toFixed(3);\n  document.querySelector(`.stats-${num}-hr`).textContent = 'HR: ' + arr[4];\n  document.querySelector(`.stats-${num}-rbi`).textContent = 'RBI: ' + arr[7];\n  document.querySelector(`.stats-${num}-ab`).textContent = 'AB: ' + arr[0];\n}\nasync function appendPitching(id, num) {\n  arr = await getPitchingTotals(id);\n  document.querySelector(`.stats-${num}-w`).textContent = 'W: ' + arr[0];\n  document.querySelector(`.stats-${num}-l`).textContent = 'L: ' + arr[1];\n  document.querySelector(`.stats-${num}-g`).textContent = 'G: ' + arr[4];\n  document.querySelector(`.stats-${num}-era`).textContent = 'ERA: ' + calcERA(arr[2], arr[5]).toFixed(2);\n  document.querySelector(`.stats-${num}-so`).textContent = 'SO: ' + arr[3];\n  document.querySelector(`.stats-${num}-ip`).textContent = 'IP: ' + arr[5];\n  document.querySelector(`.stats-${num}-whip`).textContent = 'WHIP: ' + calcWHIP(arr[6], arr[7], arr[5]).toFixed(3);\n}\nasync function appendDetails(id, num) {\n  arr = await getDetails(id);\n  document.querySelector(`.bio-${num}-birth-year`).textContent = 'Birth Year: ' + arr[2];\n  document.querySelector(`.bio-${num}-height`).textContent = 'Height: ' + Math.round(Number(arr[5]) / 12) + \"'\" + Number(arr[5]) % 12;\n  document.querySelector(`.bats-${num}`).textContent = 'Bats: ' + arr[7];\n  document.querySelector(`.throws-${num}`).textContent = 'Throws: ' + arr[8];\n  document.querySelector(`.bio-${num}-years`).textContent = 'Years Played: ' + arr[6];\n  document.querySelector(`.bio-${num}-home`).textContent = 'Home Town: ' + arr[3] + ', ' + arr[4];\n  document.querySelector(`.name-${num}`).textContent = arr[0] + ' ' + arr[1];\n}\nasync function appendAwards(id, num) {\n  arr = await getAwards(id);\n  !arr['TSN All-Star'] ? document.querySelector(`.award-${num}-all-star`).textContent = '' : document.querySelector(`.award-${num}-all-star`).textContent = 'All-Star: ' + arr['TSN All-Star'];\n  !arr['Most Valuable Player'] ? document.querySelector(`.award-${num}-mvp`).textContent = '' : document.querySelector(`.award-${num}-mvp`).textContent = 'MVP: ' + arr['Most Valuable Player'];\n  !arr['Gold Glove'] ? document.querySelector(`.award-${num}-gold-glove`).textContent = '' : document.querySelector(`.award-${num}-gold-glove`).textContent = 'Gold Glove: ' + arr['Gold Glove'];\n  !arr['Silver Slugger'] ? document.querySelector(`.award-${num}-silver-slugger`).textContent = '' : document.querySelector(`.award-${num}-silver-slugger`).textContent = 'Silver Slugger: ' + arr['Silver Slugger'];\n}\n\n// appendDetails('ohtansh01', 1);\n// appendPitching('ohtansh01', 1)\n// appendBatting('ohtansh01', 1);\n// appendAwards('ohtansh01', 1);\n// appendDetails('ruthba01', 2);\n// appendPitching('ruthba01', 2)\n// appendBatting('ruthba01', 2);\n// appendAwards('ruthba01', 2);\n\nconst button = document.querySelector('.toggle');\nbutton.addEventListener('click', () => toggle());\nfunction toggle() {\n  document.querySelector('.stats-1-list-batting').classList.toggle('hidden');\n  document.querySelector('.stats-2-list-batting').classList.toggle('hidden');\n  document.querySelector('.stats-1-list-pitching').classList.toggle('hidden');\n  document.querySelector('.stats-2-list-pitching').classList.toggle('hidden');\n}\nfunction calcAVG(hits, atBats) {\n  return hits / atBats;\n}\nfunction calcSLG(sing, doub, trip, hr, atBats) {\n  return (sing + doub * 2 + trip * 3 + hr * 4) / atBats;\n}\nfunction calcOBP(hits, walks, hbp, sacFly, atBats) {\n  return (hits + walks + hbp) / (atBats + walks + hbp + sacFly);\n}\nfunction calcOPS(sing, doub, trip, hr, atBats, hits, walks, hbp, sacFly) {\n  return calcSLG(sing, doub, trip, hr, atBats) + calcOBP(hits, walks, hbp, sacFly, atBats);\n}\nfunction calcERA(er, ip) {\n  return 9 * (er / ip);\n}\nfunction calcWHIP(bb, hits, ip) {\n  return (bb + hits) / ip;\n}\nlet submit1 = document.getElementById('s-icon-1');\nlet submit2 = document.getElementById('s-icon-2');\nlet test1 = document.getElementById('s-text-1');\nlet test2 = document.getElementById('s-text-2');\nsubmit1.addEventListener('click', () => search(test1.value, 1));\nsubmit2.addEventListener('click', () => search(test2.value, 2));\nasync function search(val, num) {\n  let id = await getIdByName(val);\n  appendBatting(id, num);\n  appendDetails(id, num);\n  appendAwards(id, num);\n  appendPitching(id, num);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb21wYXJhdG9yLWFwcC8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;